sort1 uses: Bubble Sort

How do you know?: sort1 is VERY fast with the "sorted" files, but is pretty poor when it comes to the reversed and randomized files. This indicates the "big-O" and "big-omega" charateristics found with bubble sort algorithms.

sort2 uses: Merge Sort

How do you know?: sort2 is consistant and fast, which is characteristic of the "big-O" and "big-omega" for Merge Sort algorithms.

sort3 uses: Selection Sort

How do you know?: sort3 is consistantly mediocre, which is characteristic of the "big-O" and "big-omega" for Selection Sort algorithms.

SORTED:
    sorted5k times:
    sort1 - 0.026s
    sort2 - 0.020s
    sort3 - 0.040s

    sorted10k times:
    sort1 - 0.050s
    sort2 - 0.050s
    sort3 - 0.120s

    sorted50k times:
    sort1: 0.4 - 0.8s
    sort2: 0.5 - 0.7s
    sort3: 2.4 - 2.6s

REVERSED:
    reversed5k times:
    sort1: 0.6 - 0.9s
    sort2: 0.2 - 0.4s
    sort3: 0.4 - 0.6s

    reversed10k times:
    sort1: 0.2 - 0.24s
    sort2: 0.4 - 0.6s
    sort3: 0.1 - 0.2s

    reversed50k times:
    sort1: 5.2 - 5.4s
    sort2: 0.4 - 0.7s
    sort3: 2.4 - 2.6s

RANDOM:
    random5k times:
    sort1: 0.05 - 0.07s
    sort2: 0.2 - 0.4s
    sort3: 0.4 - 0.6s

    random10k times:
    sort1: 0.17 - 0.2s
    sort2: 0.04 - 0.07s
    sort3: 0.1 - 0.14s

    random50k times:
    sort1: 5.4 - 6.2s
    sort2: 0.4 - 0.6s
    sort3: 2.4 - 2.7s